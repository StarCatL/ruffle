name: Linux Nightly Release

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

env:
  RELEASE_SCRIPT: ./.github/scripts/release.py

jobs:
  create-nightly-release:
    name: Create Nightly Release
    runs-on: ubuntu-22.04
    outputs:
      is_active: ${{ steps.activity.outputs.is_active }}
      date: ${{ steps.current_time_underscores.outputs.formattedTime }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      package_prefix: ${{ steps.create_release.outputs.package_prefix }}
      tag_name: ${{ steps.create_release.outputs.tag_name }}
      version4: ${{ steps.version.outputs.version4 }}
    if: github.repository == 'ruffle-rs/ruffle' || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4

      - name: Check for repo activity
        id: activity
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            is_active=true
          elif [ "$(git rev-list --after='24 hours' ${{ github.sha }})" ]; then
            is_active=true
          else
            is_active=false
          fi
          echo "is_active=$is_active" >> $GITHUB_OUTPUT

      - name: Install cargo-edit / cargo-get
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-edit
          version: '^0.12'
      - uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-get
          version: '^1.0'

      - name: Bump version
        if: steps.activity.outputs.is_active == 'true'
        id: version
        run: $RELEASE_SCRIPT bump

      - name: Create release commit
        if: steps.activity.outputs.is_active == 'true'
        id: commit
        run: |
          git diff > /tmp/nightly-release.patch
          echo "revision=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Upload nightly release patch
        uses: actions/upload-artifact@v4
        if: steps.activity.outputs.is_active == 'true'
        with:
          name: nightly-release-patch
          path: /tmp/nightly-release.patch

      - name: Get current time
        uses: josStorer/get-current-time@v2.1.2
        id: current_time_underscores
        with:
          format: YYYY_MM_DD

      - name: Create release
        if: steps.activity.outputs.is_active == 'true'
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: $RELEASE_SCRIPT release

  build:
    name: Build ${{ matrix.build_name }}
    needs: create-nightly-release
    if: needs.create-nightly-release.outputs.is_active == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - build_name: linux-x86_64
            os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            cargo_build_dir: target/x86_64-unknown-linux-gnu/release

          - build_name: linux-aarch64
            os: ubuntu-22.04-arm       # GitHub 原生 ARM runner
            target: aarch64-unknown-linux-gnu
            cargo_build_dir: target/aarch64-unknown-linux-gnu/release
            extra_features: wgpu/gles   # 关键：启用 GLES 后端

    runs-on: ${{ matrix.os }}
    env:
      PACKAGE_FILE: ${{ needs.create-nightly-release.outputs.package_prefix }}-${{ matrix.build_name }}.tar.gz
      CARGO_BUILD_DIR: ${{ matrix.cargo_build_dir }}

    steps:
      - uses: actions/checkout@v4

      - name: Download nightly release patch
        uses: actions/download-artifact@v4
        with:
          name: nightly-release-patch
          path: /tmp

      - name: Apply nightly release patch
        run: git apply --verbose /tmp/nightly-release.patch

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux deps
        run: |
          sudo apt-get update
          sudo apt install -y libasound2-dev libudev-dev

      - name: Cargo build
        run: |
          cargo build --locked --package ruffle_desktop \
            --release --target ${{ matrix.target }} \
            --features "${{ matrix.extra_features }}"

      - name: Package
        run: |
          mkdir package
          cp "${CARGO_BUILD_DIR}/ruffle_desktop" package/ruffle
          cp README.md package/README.md
          cp LICENSE.md package/LICENSE.md
          cd package
          tar -czvf "../${PACKAGE_FILE}" *
        shell: bash

      - name: Upload release
        run: gh release upload "${{ needs.create-nightly-release.outputs.tag_name }}" "${PACKAGE_FILE}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
