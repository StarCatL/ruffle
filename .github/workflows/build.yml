name: Release Nightly

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

env:
  RELEASE_SCRIPT: ./.github/scripts/release.py

jobs:
  create-nightly-release:
    name: Create Nightly Release
    runs-on: ubuntu-24.04
    outputs:
      is_active: ${{ steps.activity.outputs.is_active }}
      date: ${{ steps.current_time_underscores.outputs.formattedTime }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      package_prefix: ${{ steps.create_release.outputs.package_prefix }}
      tag_name: ${{ steps.create_release.outputs.tag_name }}
      version4: ${{ steps.version.outputs.version4 }}

    if: github.repository == 'ruffle-rs/ruffle' || github.event_name == 'repository_dispatch' || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4

      - name: Check for repo activity
        id: activity
        run: |
          if [ "${{ github.event_name }}" == "repository_dispatch" ] || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            is_active=true
          elif [ "$(git rev-list --after="24 hours" ${{ github.sha }})" ]; then
            is_active=true
          else
            is_active=false
          fi
          echo "is_active=$is_active" >> $GITHUB_OUTPUT

      - name: Install cargo-edit
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-edit
          version: '^0.12'

      - name: Install cargo-get
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-get
          version: '^1.0'

      - name: Bump version
        if: steps.activity.outputs.is_active == 'true'
        id: version
        run: |
          $RELEASE_SCRIPT bump
          shopt -s globstar
          sed -i -e '$a\' **/package.json

      - name: Create release commit
        if: steps.activity.outputs.is_active == 'true'
        id: commit
        run: |
          git diff
          git diff > /tmp/nightly-release.patch
          revision=$(git rev-parse HEAD)
          echo "revision=$revision" | tee -a $GITHUB_OUTPUT

      - name: Upload nightly release patch
        uses: actions/upload-artifact@v4
        if: steps.activity.outputs.is_active == 'true'
        with:
          name: nightly-release-patch
          path: /tmp/nightly-release.patch

      - name: Get current time with underscores
        uses: josStorer/get-current-time@v2.1.2
        id: current_time_underscores
        with:
          format: YYYY_MM_DD

      - name: Create release
        if: steps.activity.outputs.is_active == 'true'
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $RELEASE_SCRIPT release

  build:
    name: Build ${{ matrix.build_name }}
    needs: create-nightly-release
    if: needs.create-nightly-release.outputs.is_active == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - build_name: linux-x86_64
            os: ubuntu-24.04
            target: x86_64-unknown-linux-musl
            FEATURES: sandbox,jpegxr
            NO_DEFAULT_FEATURES: false

          - build_name: linux-aarch64
            os: ubuntu-24.04
            target: aarch64-unknown-linux-musl
            FEATURES: sandbox,jpegxr
            NO_DEFAULT_FEATURES: false

          - build_name: macos-x86_64
            os: macos-14
            target: x86_64-apple-darwin
            MACOSX_DEPLOYMENT_TARGET: 10.7
            DESKTOP_FEATURES: sandbox,jpegxr

          - build_name: macos-aarch64
            os: macos-14
            target: aarch64-apple-darwin
            MACOSX_DEPLOYMENT_TARGET: 11.0
            DESKTOP_FEATURES: sandbox,jpegxr

          - build_name: windows-x86_32
            os: windows-latest
            target: i686-pc-windows-msvc
            RUSTFLAGS: -Ctarget-feature=+crt-static
            DESKTOP_FEATURES: jpegxr
            MSI_ARCH: x86

          - build_name: windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            RUSTFLAGS: -Ctarget-feature=+crt-static
            DESKTOP_FEATURES: jpegxr
            MSI_ARCH: x64

    env:
      PACKAGE_FILE: ${{ needs.create-nightly-release.outputs.package_prefix }}-${{ matrix.build_name }}.${{ startsWith(matrix.build_name, 'win') && 'zip' || 'tar.gz' }}
      CARGO_BUILD_DIR: target/${{ matrix.target }}/release

    runs-on: ${{ matrix.os }}
    steps:
      - name: Clone Ruffle repo
        uses: actions/checkout@v4

      - name: Download nightly release patch
        uses: actions/download-artifact@v4
        with:
          name: nightly-release-patch
          path: /tmp

      - name: Apply nightly release patch
        run: git apply --verbose /tmp/nightly-release.patch

      - name: Install musl toolchain (Linux only)
        if: contains(matrix.target, 'linux-musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools musl-dev
          
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-musl" ]; then
            echo "安装 aarch64 musl 交叉编译工具链..."
            wget https://toolchains.bootlin.com/downloads/releases/toolchains/aarch64/tarballs/aarch64--musl--stable-2023.11-1.tar.bz2
            sudo tar xf aarch64--musl--stable-2023.11-1.tar.bz2 -C /usr/local
            TOOLCHAIN_PATH="/usr/local/aarch64--musl--stable-2023.11-1/bin"
            echo "$TOOLCHAIN_PATH" >> $GITHUB_PATH
            
            echo "安装 ALSA 开发库到交叉编译环境..."
            SYSROOT_DIR="/usr/local/aarch64--musl--stable-2023.11-1/aarch64-buildroot-linux-musl/sysroot"
            ALSA_VERSION="1.2.10"
            
            sudo apt-get install -y autoconf automake libtool m4
            
            wget https://www.alsa-project.org/files/pub/lib/alsa-lib-$ALSA_VERSION.tar.bz2
            tar xf alsa-lib-$ALSA_VERSION.tar.bz2
            cd alsa-lib-$ALSA_VERSION
            
            ./configure \
              --host=aarch64-buildroot-linux-musl \
              --prefix=$SYSROOT_DIR/usr \
              --enable-static \
              --disable-shared \
              --with-pic \
              --disable-python
            
            make -j$(nproc)
            sudo make install
            cd ..
            
            echo "安装 libcap 到交叉编译环境..."
            LIBCAP_VERSION="2.69"
            wget https://mirrors.edge.kernel.org/pub/linux/libs/security/linux-privs/libcap2/libcap-$LIBCAP_VERSION.tar.xz
            tar xf libcap-$LIBCAP_VERSION.tar.xz
            cd libcap-$LIBCAP_VERSION
            
            # 设置编译标志
            export CC=$TOOLCHAIN_PATH/aarch64-buildroot-linux-musl-gcc
            export AR=$TOOLCHAIN_PATH/aarch64-buildroot-linux-musl-ar
            export RANLIB=$TOOLCHAIN_PATH/aarch64-buildroot-linux-musl-ranlib
            export CFLAGS="--sysroot=$SYSROOT_DIR -I$SYSROOT_DIR/usr/include"
            export LDFLAGS="--sysroot=$SYSROOT_DIR -L$SYSROOT_DIR/usr/lib"
            
            # 禁用共享库，只构建静态库
            make -C libcap \
                BUILD_CC=gcc \
                CC=$CC \
                AR=$AR \
                RANLIB=$RANLIB \
                CFLAGS="$CFLAGS" \
                LDFLAGS="$LDFLAGS" \
                libcap.a
            
            # 修复头文件复制路径
            sudo mkdir -p $SYSROOT_DIR/usr/include/linux
            sudo cp libcap/include/uapi/linux/capability.h $SYSROOT_DIR/usr/include/linux/
            sudo mkdir -p $SYSROOT_DIR/usr/include/sys
            sudo cp libcap/cap_names.h $SYSROOT_DIR/usr/include/sys/capability.h
            sudo cp libcap/libcap.a $SYSROOT_DIR/usr/lib/
            
            # 创建pkg-config文件
            echo "prefix=$SYSROOT_DIR/usr" > libcap.pc
            echo "exec_prefix=\${prefix}" >> libcap.pc
            echo "libdir=\${exec_prefix}/lib" >> libcap.pc
            echo "includedir=\${prefix}/include" >> libcap.pc
            echo "" >> libcap.pc
            echo "Name: libcap" >> libcap.pc
            echo "Description: Linux capabilities library" >> libcap.pc
            echo "Version: $LIBCAP_VERSION" >> libcap.pc
            echo "Cflags: -I\${includedir}" >> libcap.pc
            echo "Libs: -L\${libdir} -lcap" >> libcap.pc
            
            sudo mkdir -p $SYSROOT_DIR/usr/lib/pkgconfig
            sudo cp libcap.pc $SYSROOT_DIR/usr/lib/pkgconfig/
            
            cd ..
            
            echo "安装 libudev 到交叉编译环境..."
            LIBUDEV_VERSION="253"
            wget https://github.com/systemd/systemd/archive/refs/tags/v$LIBUDEV_VERSION.tar.gz
            tar xf v$LIBUDEV_VERSION.tar.gz
            cd systemd-$LIBUDEV_VERSION
            
            # 安装构建依赖
            sudo apt-get install -y meson ninja-build gettext pkg-config gperf
            
            # 修复: 彻底禁用 capability 检查
            # 1. 创建假的 capability.h 头文件
            sudo mkdir -p $SYSROOT_DIR/usr/include/sys
            echo "#define _SYS_CAPABILITY_H" | sudo tee $SYSROOT_DIR/usr/include/sys/capability.h >/dev/null
            
            # 2. 完全重写有问题的 meson.build 部分
            sed -i '/if not cc\.has_header.*capability\.h/,/endif/ {
                /if not cc\.has_header.*capability\.h/c\

                /endif/d
                /error/d
            }' meson.build
            
            # 3. 修改源文件避免引用 capability.h
            find src -type f -exec sed -i "s/#include <sys\/capability.h>//g" {} +
            
            # 创建交叉编译文件
            echo '[binaries]' > cross.txt
            echo "c = '$TOOLCHAIN_PATH/aarch64-buildroot-linux-musl-gcc'" >> cross.txt
            echo "cpp = '$TOOLCHAIN_PATH/aarch64-buildroot-linux-musl-g++'" >> cross.txt
            echo "ar = '$TOOLCHAIN_PATH/aarch64-buildroot-linux-musl-ar'" >> cross.txt
            echo "strip = '$TOOLCHAIN_PATH/aarch64-buildroot-linux-musl-strip'" >> cross.txt
            echo "pkg-config = 'pkg-config'" >> cross.txt
            echo '' >> cross.txt
            echo '[host_machine]' >> cross.txt
            echo "system = 'linux'" >> cross.txt
            echo "cpu_family = 'aarch64'" >> cross.txt
            echo "cpu = 'aarch64'" >> cross.txt
            echo "endian = 'little'" >> cross.txt
            echo '' >> cross.txt
            echo '[properties]' >> cross.txt
            echo "sys_root = '$SYSROOT_DIR'" >> cross.txt
            echo "pkg_config_libdir = '$SYSROOT_DIR/usr/lib/pkgconfig'" >> cross.txt
            
            # 配置并编译libudev
            meson setup \
              --cross-file cross.txt \
              -Dprefix=$SYSROOT_DIR/usr \
              -Dmode=release \
              -Dtests=false \
              -Dlink-udev-shared=false \
              -Ddefault_library=static \
              build
            
            ninja -C build
            sudo ninja -C build install
            
            cd ..
            
            # 验证安装
            echo "验证交叉编译环境库文件:"
            ls -l $SYSROOT_DIR/usr/lib/libcap.*
            ls -l $SYSROOT_DIR/usr/lib/libudev.*
            ls -l $SYSROOT_DIR/usr/lib/pkgconfig/*.pc
          fi

      - name: Install musl target
        if: contains(matrix.target, 'linux-musl')
        run: rustup target add ${{ matrix.target }}

      - name: Set cross-compilation environment (aarch64 only)
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: |
          SYSROOT_DIR="/usr/local/aarch64--musl--stable-2023.11-1/aarch64-buildroot-linux-musl/sysroot"
          TOOLCHAIN_PATH="/usr/local/aarch64--musl--stable-2023.11-1/bin"
          echo "CC=$TOOLCHAIN_PATH/aarch64-buildroot-linux-musl-gcc" >> $GITHUB_ENV
          echo "CXX=$TOOLCHAIN_PATH/aarch64-buildroot-linux-musl-g++" >> $GITHUB_ENV
          echo "AR=$TOOLCHAIN_PATH/aarch64-buildroot-linux-musl-ar" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=$SYSROOT_DIR" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$SYSROOT_DIR/usr/lib/pkgconfig" >> $GITHUB_ENV
          echo "ALSA_STATIC=1" >> $GITHUB_ENV
          echo "LIBUDEV_STATIC=1" >> $GITHUB_ENV
          echo "RUSTFLAGS=-L$SYSROOT_DIR/usr/lib" >> $GITHUB_ENV
          echo "CFLAGS=-I$SYSROOT_DIR/usr/include" >> $GITHUB_ENV
          echo "LDFLAGS=-L$SYSROOT_DIR/usr/lib" >> $GITHUB_ENV

      - name: Set linker for musl targets
        if: contains(matrix.target, 'linux-musl')
        run: |
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-musl" ]; then
            echo "CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=x86_64-linux-musl-gcc" >> $GITHUB_ENV
          elif [ "${{ matrix.target }}" = "aarch64-unknown-linux-musl" ]; then
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=/usr/local/aarch64--musl--stable-2023.11-1/bin/aarch64-buildroot-linux-musl-gcc" >> $GITHUB_ENV
          fi

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies (non-musl only)
        if: runner.os == 'Linux' && !contains(matrix.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt install -y libasound2-dev libudev-dev

      - name: Install WiX
        if: runner.os == 'Windows'
        run: |
          dotnet tool install --global wix --version 5.0.2
          wix extension add -g WixToolset.UI.wixext/5.0.2
          wix extension add -g WixToolset.Util.wixext/5.0.2

      - name: Cargo build
        run: |
          if [[ "${{ matrix.target }}" == *"musl"* ]]; then
            cargo build --locked --package ruffle_desktop --release \
              --no-default-features \
              --features "${{ matrix.FEATURES }}" \
              --target ${{ matrix.target }}
          else
            cargo build --locked --package ruffle_desktop --release \
              ${{ matrix.DESKTOP_FEATURES && '--features' }} ${{ matrix.DESKTOP_FEATURES }} \
              ${{ matrix.target && '--target' }} ${{ matrix.target }}
          fi
        env:
          CFG_RELEASE_CHANNEL: nightly
          RUSTFLAGS: ${{ matrix.RUSTFLAGS }}
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.MACOSX_DEPLOYMENT_TARGET }}

      - name: Package common
        run: |
          mkdir package
          cp README.md package/README.md
          cp LICENSE.md package/LICENSE.md

      - name: Package MSI
        run: |
          cd desktop/packages/windows/wix
          wix build ruffle.wxs -ext WixToolset.UI.wixext -ext WixToolset.Util.wixext -arch ${{ matrix.MSI_ARCH }} -o ../../../../package/setup.msi -pdbtype none
        env:
          RUFFLE_VERSION: ${{ needs.create-nightly-release.outputs.version4 }}
          CARGO_BUILD_DIR: ../../../../target/${{ matrix.target }}/release
        if: runner.os == 'Windows'

      - name: Package Windows
        if: runner.os == 'Windows'
        run: |
          cp ${{ env.CARGO_BUILD_DIR }}/ruffle_desktop.exe package/ruffle.exe
          7z a ${{ env.PACKAGE_FILE }} ./package/*

      - name: Package Linux
        if: runner.os == 'Linux'
        run: |
          cp ${{ env.CARGO_BUILD_DIR }}/ruffle_desktop package/ruffle

          mkdir -p package/extras
          cp desktop/packages/linux/rs.ruffle.Ruffle.desktop package/extras
          cp desktop/packages/linux/rs.ruffle.Ruffle.metainfo.xml package/extras
          cp desktop/packages/linux/rs.ruffle.Ruffle.svg package/extras

          cd package
          tar -czvf ../${{ env.PACKAGE_FILE }} *

      - name: Upload package
        if: runner.os != 'macOS'
        run: gh release upload "${{ needs.create-nightly-release.outputs.tag_name }}" "${{ env.PACKAGE_FILE }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Safari Web Extension stub binary
        if: runner.os == 'macOS'
        run: cargo build --locked --package ruffle_web_safari --release ${{ matrix.target && '--target' }} ${{ matrix.target }}
        env:
          CFG_RELEASE_CHANNEL: nightly
          RUSTFLAGS: ${{ matrix.RUSTFLAGS }}
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.MACOSX_DEPLOYMENT_TARGET }}

      - name: Upload macOS build artifact
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build_name }}
          path: |
            ${{ env.CARGO_BUILD_DIR }}/ruffle_desktop
            ${{ env.CARGO_BUILD_DIR }}/ruffle_web_safari
            package

  build-mac-universal-binary:
    name: Build macOS universal binary
    needs: [create-nightly-release, build, build-browser-extensions]
    runs-on: macos-14
    env:
      PACKAGE_FILE: ${{ needs.create-nightly-release.outputs.package_prefix }}-macos-universal.tar.gz
    steps:
      - name: Clone Ruffle repo
        uses: actions/checkout@v4

      - name: Download aarch64 binary
        uses: actions/download-artifact@v4
        with:
          name: macos-aarch64

      - name: Download x86_64 binary
        uses: actions/download-artifact@v4
        with:
          name: macos-x86_64

      - name: Download Safari extension
        uses: actions/download-artifact@v4
        with:
          name: macos-safari

      - name: Make universal desktop binary
        run: |
          lipo -create -output package/ruffle target/x86_64-apple-darwin/release/ruffle_desktop target/aarch64-apple-darwin/release/ruffle_desktop
          chmod +x package/ruffle

      - name: Make universal Safari stub binary
        continue-on-error: true
        run: |
          lipo -create -output package/ruffle_web_safari target/x86_64-apple-darwin/release/ruffle_web_safari target/aarch64-apple-darwin/release/ruffle_web_safari
          chmod +x package/ruffle_web_safari

      - name: Create app bundle
        run: |
          cp -r desktop/packages/macOS package/Ruffle.app
          mkdir package/Ruffle.app/Contents/MacOS
          mv package/ruffle package/Ruffle.app/Contents/MacOS/ruffle

      - name: Compile asset catalog
        run: |
          mkdir package/Ruffle.app/Contents/Resources
          xcrun actool --compile package/Ruffle.app/Contents/Resources desktop/assets/Assets.xcassets --minimum-deployment-target 10.0 --platform macosx --warnings --errors --notices --include-all-app-icons

      - name: Create extension bundle
        continue-on-error: true
        run: |
          mkdir package/Ruffle.app/Contents/PlugIns
          cp -r web/packages/extension/safari/package package/Ruffle.app/Contents/PlugIns/Ruffle\ Web.appex
          mkdir package/Ruffle.app/Contents/PlugIns/Ruffle\ Web.appex/Contents/Resources
          mkdir package/Ruffle.app/Contents/PlugIns/Ruffle\ Web.appex/Contents/MacOS
          mv package/ruffle_web_safari package/Ruffle.app/Contents/PlugIns/Ruffle\ Web.appex/Contents/MacOS/ruffle_web_safari
          cp ruffle_extension.zip package/Ruffle.app/Contents/PlugIns/Ruffle\ Web.appex/Contents/Resources
          cd package/Ruffle.app/Contents/PlugIns/Ruffle\ Web.appex/Contents/Resources
          unzip ruffle_extension.zip
          rm ruffle_extension.zip
          cd ../../../../../../..

      - name: Sign bundle
        continue-on-error: true
        env:
          APPLE_DEVELOPER_KEY: ${{ secrets.APPLE_DEVELOPER_KEY }}
          APPLE_DEVELOPER_KEY_PASSWORD: ${{ secrets.APPLE_DEVELOPER_KEY_PASSWORD }}
        run: |
          echo $APPLE_DEVELOPER_KEY | base64 --decode > certificate.p12
          security create-keychain -p correct-horse-battery-staple build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p correct-horse-battery-staple build.keychain
          security import certificate.p12 -k build.keychain -P $APPLE_DEVELOPER_KEY_PASSWORD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k correct-horse-battery-staple build.keychain
          codesign --deep -s ${{ secrets.APPLE_DEVELOPER_IDENTITY }} -f --entitlements desktop/assets/macOSEntitlements.plist --options runtime package/Ruffle.app
          codesign --verify -vvvv package/Ruffle.app

      - name: Notarize bundle
        continue-on-error: true
        run: |
          xcrun notarytool store-credentials "Ruffle" --apple-id ${{ secrets.APPLE_ID }} --team-id ${{ secrets.APPLE_TEAM }} --password ${{ secrets.APPLE_APP_PASSWORD }}
          cd package
          zip -r Ruffle.zip Ruffle.app
          mv Ruffle.zip ..
          cd ..
          xcrun notarytool submit Ruffle.zip --keychain-profile Ruffle --wait
          xcrun stapler staple package/Ruffle.app

      - name: Package macOS
        run: |
          cd package
          tar -czvf ../${{ env.PACKAGE_FILE }} *

      - name: Upload package
        run: gh release upload "${{ needs.create-nightly-release.outputs.tag_name }}" "${{ env.PACKAGE_FILE }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-stub-report:
    name: Build AVM2 stub repository
    needs: create-nightly-release
    if: needs.create-nightly-release.outputs.is_active == 'true'
    runs-on: ubuntu-24.04
    steps:
      - name: Clone Ruffle repo
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Generate report
        run: ./stub-report/generate-report.sh

      - name: Upload report
        run: gh release upload "${{ needs.create-nightly-release.outputs.tag_name }}" avm2_report.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-browser-extensions:
    name: Build browser extensions
    needs: create-nightly-release
    if: needs.create-nightly-release.outputs.is_active == 'true'
    runs-on: ubuntu-24.04
    permissions:
      actions: read
      attestations: write
      checks: read
      contents: write
      id-token: write
      pull-requests: read
      statuses: write
    steps:
      - name: Clone Ruffle repo
        uses: actions/checkout@v4

      - name: Download nightly release patch
        uses: actions/download-artifact@v4
        with:
          name: nightly-release-patch
          path: /tmp

      - name: Apply nightly release patch
        run: git apply --verbose /tmp/nightly-release.patch

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: wasm32-unknown-unknown
          components: rust-src

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          registry-url: https://registry.npmjs.org

      - name: Install wasm-bindgen
        run: cargo install wasm-bindgen-cli --version 0.2.100

      - name: Install wasm-opt
        uses: sigoden/install-binary@v1
        with:
          repo: WebAssembly/binaryen
          tag: version_123
          name: wasm-opt

      - name: Install node packages
        working-directory: web
        shell: bash -l {0}
        run: npm ci

      - name: Seal version data
        shell: bash -l {0}
        working-directory: web
        env:
          CFG_RELEASE_CHANNEL: nightly
          VERSION4: ${{ needs.create-nightly-release.outputs.version4 }}
          ENABLE_VERSION_SEAL: "true"
          FIREFOX_EXTENSION_ID: ${{ secrets.FIREFOX_EXTENSION_ID }}
        run: npm run version-seal

      - name: Build web
        env:
          CFG_RELEASE_CHANNEL: nightly
          VERSION4: ${{ needs.create-nightly-release.outputs.version4 }}
          CARGO_FEATURES: jpegxr
          FIREFOX_EXTENSION_ID: ${{ secrets.FIREFOX_EXTENSION_ID }}
          WASM_SOURCE: cargo_and_store
        working-directory: web
        shell: bash -l {0}
        run: npm run build:repro

      - name: Produce reproducible source archive
        shell: bash -l {0}
        run: |
          zip -r reproducible-source.zip . -x '/web/node_modules/*' '/web/*/node_modules/*' '/web/packages/*/dist/*' '/web/docker/docker_builds/packages/*' '/target/*' '/.git/*' '/tests/tests/swfs/*'
          cp reproducible-source.zip "${{ needs.create-nightly-release.outputs.package_prefix }}-reproducible-source.zip"

      - name: Upload reproducible source archive
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
        run: |
          tag_name="${{ needs.create-nightly-release.outputs.tag_name }}"
          package_file="${{ needs.create-nightly-release.outputs.package_prefix }}-reproducible-source.zip"
          gh release upload "$tag_name" "$package_file"

      - name: Upload generic extension
        run: |
          tag_name="${{ needs.create-nightly-release.outputs.tag_name }}"
          package_file="${{ needs.create-nightly-release.outputs.package_prefix }}-web-extension.zip"
          cp "./web/packages/extension/dist/ruffle_extension.zip" "$package_file"
          gh release upload "$tag_name" "$package_file"
          rm "$package_file"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Safari build artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-safari
          path: ./web/packages/extension/dist/ruffle_extension.zip

      - name: Upload Firefox extension (unsigned)
        run: |
          tag_name="${{ needs.create-nightly-release.outputs.tag_name }}"
          package_file="${{ needs.create-nightly-release.outputs.package_prefix }}-web-extension-firefox-unsigned.xpi"
          cp "./web/packages/extension/dist/firefox_unsigned.xpi" "$package_file"
          gh release upload "$tag_name" "$package_file"
          rm "$package_file"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Chrome extension
        if: env.CHROME_EXTENSION_ID != ''
        id: publish-chrome-extension
        continue-on-error: true
        env:
          CHROME_EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
        uses: mnao305/chrome-extension-upload@v5.0.0
        with:
          extension-id: ${{ secrets.CHROME_EXTENSION_ID }}
          client-id: ${{ secrets.CHROME_CLIENT_ID }}
          client-secret: ${{ secrets.CHROME_CLIENT_SECRET }}
          refresh-token: ${{ secrets.CHROME_REFRESH_TOKEN }}
          file-path: ./web/packages/extension/dist/ruffle_extension.zip

      - name: Publish Edge extension
        if: env.EDGE_PRODUCT_ID != ''
        id: publish-edge-extension
        continue-on-error: true
        env:
          EDGE_PRODUCT_ID: ${{ secrets.EDGE_PRODUCT_ID }}
        uses: wdzeng/edge-addon@v2
        with:
          product-id: ${{ secrets.EDGE_PRODUCT_ID }}
          zip-path: ./web/packages/extension/dist/ruffle_extension.zip
          client-id: ${{ secrets.EDGE_CLIENT_ID }}
          api-key: ${{ secrets.EDGE_API_KEY }}

      - name: Publish Firefox extension
        if: env.FIREFOX_EXTENSION_ID != ''
        id: publish-firefox-extension
        continue-on-error: true
        env:
          FIREFOX_EXTENSION_ID: ${{ secrets.FIREFOX_EXTENSION_ID }}
          MOZILLA_API_KEY: ${{ secrets.MOZILLA_API_KEY }}
          MOZILLA_API_SECRET: ${{ secrets.MOZILLA_API_SECRET }}
          SOURCE_TAG: ${{ needs.create-nightly-release.outputs.tag_name }}
        working-directory: web/packages/extension
        shell: bash -l {0}
        run: npm run sign-firefox

  build-web-demo-and-selfhosted:
    name: Build web demo and selfhosted package with docs, and release assets for dual-wasm extensions
    needs: create-nightly-release
    if: needs.create-nightly-release.outputs.is_active == 'true'
    runs-on: ubuntu-24.04
    permissions:
      actions: read
      attestations: write
      checks: read
      contents: write
      id-token: write
      pull-requests: read
      statuses: write
    steps:
      - name: Clone Ruffle repo
        uses: actions/checkout@v4

      - name: Download nightly release patch
        uses: actions/download-artifact@v4
        with:
          name: nightly-release-patch
          path: /tmp

      - name: Apply nightly release patch
        run: git apply --verbose /tmp/nightly-release.patch

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: wasm32-unknown-unknown
          components: rust-src

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          registry-url: https://registry.npmjs.org

      - name: Install wasm-bindgen
        run: cargo install wasm-bindgen-cli --version 0.2.100

      - name: Install wasm-opt
        uses: sigoden/install-binary@v1
        with:
          repo: WebAssembly/binaryen
          tag: version_123
          name: wasm-opt

      - name: Install node packages
        working-directory: web
        shell: bash -l {0}
        run: npm ci

      - name: Seal version data
        shell: bash -l {0}
        working-directory: web
        env:
          CFG_RELEASE_CHANNEL: nightly
          VERSION4: ${{ needs.create-nightly-release.outputs.version4 }}
          ENABLE_VERSION_SEAL: "true"
          FIREFOX_EXTENSION_ID: ${{ secrets.FIREFOX_EXTENSION_ID }}
        run: npm run version-seal

      - name: Build web
        env:
          CFG_RELEASE_CHANNEL: nightly
          VERSION4: ${{ needs.create-nightly-release.outputs.version4 }}
          CARGO_FEATURES: jpegxr
          FIREFOX_EXTENSION_ID: ${{ secrets.FIREFOX_EXTENSION_ID }}
          WASM_SOURCE: cargo_and_store
        working-directory: web
        shell: bash -l {0}
        run: npm run build:dual-wasm-repro

      - name: Upload dual-wasm generic extension
        run: |
          tag_name="${{ needs.create-nightly-release.outputs.tag_name }}"
          package_file="${{ needs.create-nightly-release.outputs.package_prefix }}-web-extension-dual-wasm.zip"
          cp "./web/packages/extension/dist/ruffle_extension.zip" "$package_file"
          gh release upload "$tag_name" "$package_file"
          rm "$package_file"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload dual-wasm Firefox extension (unsigned)
        run: |
          tag_name="${{ needs.create-nightly-release.outputs.tag_name }}"
          package_file="${{ needs.create-nightly-release.outputs.package_prefix }}-web-extension-firefox-dual-wasm-unsigned.xpi"
          cp "./web/packages/extension/dist/firefox_unsigned.xpi" "$package_file"
          gh release upload "$tag_name" "$package_file"
          rm "$package_file"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build web docs
        working-directory: web
        run: npm run docs

      - name: Publish npm package
        run: npm publish --access public --provenance
        continue-on-error: true
        working-directory: web/packages/selfhosted/dist
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Package selfhosted
        run: zip -r "${{ needs.create-nightly-release.outputs.package_prefix }}-web-selfhosted.zip" .
        working-directory: web/packages/selfhosted/dist

      - name: Upload selfhosted
        run: |
          tag_name="${{ needs.create-nightly-release.outputs.tag_name }}"
          package_file="${{ needs.create-nightly-release.outputs.package_prefix }}-web-selfhosted.zip"
          gh release upload "$tag_name" "$package_file"
        working-directory: web/packages/selfhosted/dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clone JS docs
        uses: actions/checkout@v4
        with:
          repository: ruffle-rs/js-docs
          path: js-docs
          ref: master
          fetch-depth: 0
          persist-credentials: false

      - name: Update JS docs
        run: |
          rm -rf master/
          cp -r ../web/packages/core/docs master
          git config user.name "RuffleBuild"
          git config user.email "ruffle@ruffle.rs"
          git add -A
          git commit --amend -m "Nightly build ${{ needs.create-nightly-release.outputs.date }}"
        working-directory: js-docs

      - name: Push JS docs
        if: github.repository == 'ruffle-rs/ruffle'
        uses: ad-m/github-push-action@master
        with:
          repository: ruffle-rs/js-docs
          github_token: ${{ secrets.RUFFLE_BUILD_TOKEN }}
          directory: js-docs
          force: true

      - name: Clone web demo
        uses: actions/checkout@v4
        with:
          repository: ruffle-rs/demo
          path: demo
          ref: master
          fetch-depth: 0
          persist-credentials: false

      - name: Update web demo
        run: |
          rm -fr *
          cp -fr ../web/packages/demo/dist/* .
          git restore swfs swfs.json
          git config user.name "RuffleBuild"
          git config user.email "ruffle@ruffle.rs"
          git add -A
          git commit --amend -m "Nightly build ${{ needs.create-nightly-release.outputs.date }}"
        working-directory: demo

      - name: Push web demo
        if: github.repository == 'ruffle-rs/ruffle'
        uses: ad-m/github-push-action@master
        with:
          repository: ruffle-rs/demo
          github_token: ${{ secrets.RUFFLE_BUILD_TOKEN }}
          directory: demo
          force: true

  publish-aur-package:
    name: Publish AUR package
    needs: [create-nightly-release, build]
    runs-on: ubuntu-24.04
    if: github.repository == 'ruffle-rs/ruffle'
    steps:
      - uses: actions/checkout@v4

      - name: Get current time with dashes
        uses: josStorer/get-current-time@v2.1.2
        id: current_time_dashes
        with:
          format: YYYY-MM-DD

      - name: Get current time with dots
        uses: josStorer/get-current-time@v2.1.2
        id: current_time_dots
        with:
          format: YYYY.MM.DD

      - name: Download package
        run: gh release download "${{ needs.create-nightly-release.outputs.tag_name }}" --pattern "${{ needs.create-nightly-release.outputs.package_prefix }}-linux-x86_64.tar.gz"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update PKGBUILD
        run: |
          sed -i -e "s/@VERSION@/${{ steps.current_time_dots.outputs.formattedTime }}/" \
                 -e "s/@SHA512SUM@/$(sha512sum ${{ needs.create-nightly-release.outputs.package_prefix }}-linux-x86_64.tar.gz | cut -d' ' -f1)/" \
                 desktop/packages/linux/aur/ruffle-nightly-bin/PKGBUILD

      - name: Publish AUR package
        uses: KSXGitHub/github-actions-deploy-aur@v4.1.1
        with:
          pkgname: ruffle-nightly-bin
          pkgbuild: desktop/packages/linux/aur/ruffle-nightly-bin/PKGBUILD
          commit_username: RuffleBuild
          commit_email: ruffle@ruffle.rs
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: Update to Nightly ${{ steps.current_time_dashes.outputs.formattedTime }}
